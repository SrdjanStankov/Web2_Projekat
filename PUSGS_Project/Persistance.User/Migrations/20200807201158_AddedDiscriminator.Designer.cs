// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistance.User;

namespace Persistance.User.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20200807201158_AddedDiscriminator")]
    partial class AddedDiscriminator
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAviationAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRentACarAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Points")
                        .HasColumnType("float");

                    b.Property<bool>("RequirePasswordChange")
                        .HasColumnType("bit");

                    b.HasKey("Email");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Core.Entities.UserFriends", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FriendEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FriendEmail");

                    b.HasIndex("UserEmail");

                    b.ToTable("UserFriends");
                });

            modelBuilder.Entity("Core.Entities.AviationAdministrator", b =>
                {
                    b.HasBaseType("Core.Entities.User");

                    b.HasDiscriminator().HasValue("AviationAdministrator");
                });

            modelBuilder.Entity("Core.Entities.RentACarAdministrator", b =>
                {
                    b.HasBaseType("Core.Entities.User");

                    b.HasDiscriminator().HasValue("RentACarAdministrator");
                });

            modelBuilder.Entity("Core.Entities.SystemAdministrator", b =>
                {
                    b.HasBaseType("Core.Entities.User");

                    b.HasDiscriminator().HasValue("SystemAdministrator");
                });

            modelBuilder.Entity("Core.Entities.UserFriends", b =>
                {
                    b.HasOne("Core.Entities.User", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendEmail");

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserEmail");
                });
#pragma warning restore 612, 618
        }
    }
}
